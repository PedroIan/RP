library(mlbench)
data(BreastCancer)
db<- na.omit(BreastCancer)
dbLabel[dbClass == 'benign']<- -1
View(db)
db[db[,12] == 'benign', 12]<- -1
X<- data.matrix(db[,2:10])
y<- data.matrix(db[,12])
library(mlbench)
data(BreastCancer)
db<- na.omit(BreastCancer)
X<- data.matrix(db[,2:10])
y<- data.matrix(db[,12])
View(db)
X<- data.matrix(db[,2:10])
y<- data.matrix(db[,11])
y[y == 'benign']<- -1
y[y == 'malignant']<- 1
View(y)
prcomp(x, retx = TRUE, center = TRUE, scale. = FALSE,
tol = NULL, ...)
prcomp(x, retx = TRUE, center = TRUE, scale. = FALSE,
tol = NULL)
prcomp(X, retx = TRUE, center = TRUE, scale. = FALSE,
tol = NULL)
a <- prcomp(X, retx = TRUE, center = TRUE, scale. = FALSE,
tol = NULL)
View(a)
a <- prcomp(X)
View(a)
b <- a[[1]]
View(a)
b <- a$sdev
b <- a$center
a <- prcomp(X[1,])
View(a)
a <- prcomp(X[2,])
a <- prcomp(X[7,])
a <- prcomp(X[7,])
a <- prcomp(X)
View(a)
a <- prcomp(X, rank. = 3)
View(a)
a <- prcomp(X)
View(a)
svm(X, y = y, scale = TRUE, type = NULL, kernel = "radial", degree = 3,
class.weights = NULL, cachesize = 40, tolerance = 0.001, epsilon = 0.1,
shrinking = TRUE, cross = 10, na.action = na.omit)
library(e1071)
svm(X, y = y, scale = TRUE, type = NULL, kernel = "radial", degree = 3,
class.weights = NULL, cachesize = 40, tolerance = 0.001, epsilon = 0.1,
shrinking = TRUE, cross = 10, na.action = na.omit)
svm(X, y = y, scale = TRUE, kernel = "radial", degree = 3,
class.weights = NULL, cachesize = 40, tolerance = 0.001, epsilon = 0.1,
shrinking = TRUE, cross = 10, na.action = na.omit)
svm(X, y = y, scale = TRUE, kernel = "radial", degree = 3, class.weights = NULL, cachesize = 40, tolerance = 0.001, epsilon = 0.1, shrinking = TRUE, cross = 10, na.action = na.omit)
y <- as.numeric(y)
svm(X, y = y, scale = TRUE, kernel = "radial", degree = 3, class.weights = NULL, cachesize = 40, tolerance = 0.001, epsilon = 0.1, shrinking = TRUE, cross = 10, na.action = na.omit)
svm(X, y = y, kernel = "radial", degree = 3, class.weights = NULL, cachesize = 40, tolerance = 0.001, epsilon = 0.1, shrinking = TRUE, cross = 10, na.action = na.omit)
svm(X, y, kernel = "radial", degree = 3, class.weights = NULL, cachesize = 40, tolerance = 0.001, epsilon = 0.1, shrinking = TRUE, cross = 10, na.action = na.omit)
svm(X, as.vector(y), kernel = "radial", degree = 3, class.weights = NULL, cachesize = 40, tolerance = 0.001, epsilon = 0.1, shrinking = TRUE, cross = 10, na.action = na.omit)
svm(X, y, kernel = "radial", tolerance = 0.001, epsilon = 0.1, shrinking = TRUE, cross = 10, na.action = na.omit)
svm(X, y, kernel = "radial", tolerance = 0.001, epsilon = 0.1, shrinking = TRUE, na.action = na.omit)
svm(X, y, kernel = "radial", tolerance = 0.001, epsilon = 0.1, shrinking = TRUE, cross = 1:10, na.action = na.omit)
svm(X, y, kernel = "radial", tolerance = 0.001, epsilon = 0.1, shrinking = TRUE, cross = 10, na.action = na.omit)
svm(X, y, kernel = "radial", tolerance = 0.001, epsilon = 0.1, shrinking = TRUE, cross = c(1:10), na.action = na.omit)
svm(X, y, kernel = "radial", tolerance = 0.001, epsilon = 0.1, shrinking = TRUE, na.action = na.omit)
svm(X, y, kernel = "radial", tolerance = 0.001, epsilon = 0.1, cross = 10)
a <- svm(X, y, kernel = "radial", tolerance = 0.001, epsilon = 0.1, cross = 10)
View(a)
svmTreinado <- svm(X, y, kernel = "radial", tolerance = 0.001, epsilon = 0.1, cross = 10)
View(svmTreinado)
library(penaltyLearning)
confusionMatrix(predictions, testDf$class)
require(ks)
require(caret)
confusionMatrix(predictions, testDf$class)
View(svmTreinado)
confusionMatrix(svmTreinado$decision.values, y)
yhat <- svmTreinado$decision.values
yhat[yhat > 0] <- 1
yhat[yhat < 0] <- -1
confusionMatrix(factor(yhat), factor(y))
svmTreinado <- svm(X, y, const = 1, kernel = "radial", tolerance = 0.001, epsilon = 0.1, cross = 10)
yhat <- svmTreinado$decision.values
yhat[yhat > 0] <- 1
yhat[yhat < 0] <- -1
confusionMatrix(factor(yhat), factor(y))
a <- data.frame(X, y)
View(a)
model_caret <- train(y ~ .,
data = a,
trControl = data_ctrl,
method = "svm",
na.action = na.pass)
data_ctrl <- trainControl(method = "cv", number = 10)
View(data_ctrl)
trainIndex <- createDataPartition(y, p=0.8, list=FALSE)
svmTreinado <- svm(X[trainIndex,], y[trainIndex], const = 1, kernel = "radial", tolerance = 0.001, epsilon = 0.1, cross = 10)
View(svmTreinado)
svmModel <- svm(X[trainIndex,], y[trainIndex], const = 1, kernel = "radial", tolerance = 0.001, epsilon = 0.1, cross = 10)
predictions <- predict(svModel, y[-trainIndex])
predictions <- predict(svmModel, y[-trainIndex])
source('D:/Users/pedro/Documents/GitHub/RP/ExercicioPCASVM/ExercicioPCASVM.R')
rm(list = ls())
library(mlbench)
library(e1071)
library(SparseM)
require(caret)
require(ks)
data(BreastCancer)
db<- na.omit(BreastCancer)
X<- data.matrix(db[,2:10])
y<- data.matrix(db[,11])
y[y == 'benign']<- -1
y[y == 'malignant']<- 1
y <- as.numeric(y)
for (i in 1:nrow(X)) {
a <- prcomp(X[i,])
}
trainIndex <- createDataPartition(y, p=0.8, list=FALSE)
a <- data.frame(X, y)
a <- prcomp(X, rank. = 3)
b <- a$center
svmModel <- svm(X[trainIndex,], y[trainIndex], const = 1, kernel = "radial", tolerance = 0.001, epsilon = 0.1, cross = 10)
predictions <- predict(svmModel, y[-trainIndex])
yhat <- svmTreinado$decision.values
yhat[yhat > 0] <- 1
yhat[yhat < 0] <- -1
confusionMatrix(factor(yhat), factor(y))
asd <- y[-trainIndex]
predictions <- predict(svmModel, X[-trainIndex,])
yhat <- predictions
yhat[yhat > 0] <- 1
yhat[yhat < 0] <- -1
confusionMatrix(factor(yhat), factor(y))
confusionMatrix(factor(yhat), factor(y[-trainIndex]))
rm(list = ls())
library(mlbench)
library(e1071)
library(SparseM)
require(caret)
require(ks)
data(BreastCancer)
db<- na.omit(BreastCancer)
X<- data.matrix(db[,2:10])
y<- data.matrix(db[,11])
y[y == 'benign']<- -1
y[y == 'malignant']<- 1
y <- as.numeric(y)
for (i in 1:nrow(X)) {
a <- prcomp(X[i,])
}
trainIndex <- createDataPartition(y, p=0.7, list=FALSE)
a <- data.frame(X, y)
a <- prcomp(X, rank. = 3)
b <- a$center
svmModel <- svm(X[trainIndex,], y[trainIndex], const = 1, kernel = "radial", tolerance = 0.001, epsilon = 0.1, cross = 10)
asd <- y[-trainIndex]
predictions <- predict(svmModel, X[-trainIndex,])
yhat <- predictions
yhat[yhat > 0] <- 1
yhat[yhat < 0] <- -1
confusionMatrix(factor(yhat), factor(y[-trainIndex]))
View(a)
X <- a$x
svmModel <- svm(X[trainIndex,], y[trainIndex], const = 1, kernel = "radial", tolerance = 0.001, epsilon = 0.1, cross = 10)
asd <- y[-trainIndex]
predictions <- predict(svmModel, X[-trainIndex,])
yhat <- predictions
yhat[yhat > 0] <- 1
yhat[yhat < 0] <- -1
confusionMatrix(factor(yhat), factor(y[-trainIndex]))
a <- prcomp(X, rank. = 2)
b <- a$center
X <- a$x
svmModel <- svm(X[trainIndex,], y[trainIndex], const = 1, kernel = "radial", tolerance = 0.001, epsilon = 0.1, cross = 10)
asd <- y[-trainIndex]
predictions <- predict(svmModel, X[-trainIndex,])
yhat <- predictions
yhat[yhat > 0] <- 1
yhat[yhat < 0] <- -1
confusionMatrix(factor(yhat), factor(y[-trainIndex]))
ordenado <- sort(X[,1])
ordenado <- sort(X[,1], )
ordenado <- sort(X[,1], decreasing = TRUE)
View(a)
ordenado <- var(X[,1])
a <- prcomp(X)
todosOsComponentes <- prcomp(X)
View(todosOsComponentes)
X<- data.matrix(db[,2:10])
todosOsComponentes <- prcomp(X)
View(todosOsComponentes)
X <- a$x
View(X)
todosOsComponentes <- prcomp(X)
X <- todosOsComponentes$x
X<- data.matrix(db[,2:10])
todosOsComponentes <- prcomp(X)
X <- todosOsComponentes$x
View(X)
pca2D <- prcomp(X, rank. = 2)
View(pca2D)
X <- pca2D$x
svmModel <- svm(X[trainIndex,], y[trainIndex], const = 1, kernel = "radial", tolerance = 0.001, epsilon = 0.1, cross = 10)
asd <- y[-trainIndex]
predictions <- predict(svmModel, X[-trainIndex,])
yhat <- predictions
yhat[yhat > 0] <- 1
yhat[yhat < 0] <- -1
confusionMatrix(factor(yhat), factor(y[-trainIndex]))
ordenado <- var(X[,1])
variancias <- NULL
for (i in 1:ncol(X)) {
variancias <- c(variancias, var(X[,i]))
}
variancias <- NULL
for (i in 1:ncol(X)) {
variancias <- c(variancias, var(todosOsComponentes$x[,i]))
}
variancias <- NULL
for (i in 1:ncol(X)) {
variancias <- c(variancias, var(todosOsComponentes$x[,i]))
}
View(todosOsComponentes)
variancias <- NULL
for (i in 1:ncol(todosOsComponentes$x)) {
variancias <- c(variancias, var(todosOsComponentes$x[,i]))
}
print(1:ncol(todosOsComponentes$x), variancias)
print(c(1:ncol(todosOsComponentes$x)), variancias)
quantidadeDeComponentes <- ncol(todosOsComponentes$x)
quantidadeDeComponentes <- ncol(todosOsComponentes$x)
print(c(1:quantidadeDeComponentes), variancias)
plot(c(1:quantidadeDeComponentes), variancias)
