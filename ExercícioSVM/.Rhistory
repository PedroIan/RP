library('kernlab')
p<-mlbench.spirals(1000,cycles=1, sd=0.05)
library('mlbench')
p<-mlbench.spirals(1000,cycles=1, sd=0.05)
View(p)
trainIndex_wdbc <- createDataPartition(p[[x]], p=0.8, list=FALSE)
library(caret)
library(ks)
trainIndex_wdbc <- createDataPartition(p[[x]], p=0.8, list=FALSE)
trainIndex_wdbc <- createDataPartition(p[x], p=0.8, list=FALSE)
x<- p[[x]]
View(p)
x<- p$x
View(x)
trainIndex_wdbc <- createDataPartition(p$x, p=0.8, list=FALSE)
View(trainIndex_wdbc)
trainIndex_wdbc <- createDataPartition(p$x[1], p=0.8, list=FALSE)
x <- p$x
x <- x[1]
p<-mlbench.spirals(1000,cycles=1, sd=0.05)
x <- p$x
x <- nrow(x)
trainIndex_wdbc <- createDataPartition(1:nrow(x), p=0.8, list=FALSE)
x <- p$x
trainIndex_wdbc <- createDataPartition(1:nrow(x), p=0.8, list=FALSE)
View(p)
y <- as.numeric(p$classes)
trainIndex_wdbc <- createDataPartition(y, p=0.8, list=FALSE)
svmtrein<- ksvm(x[trainIndex,],y[trainIndex],type='C-bsvc',kernel='rbfdot',kpar=list(sigma=0.1),C=10)
trainIndex <- createDataPartition(y, p=0.8, list=FALSE)
svmtrein<- ksvm(x[trainIndex,],y[trainIndex],type='C-bsvc',kernel='rbfdot',kpar=list(sigma=0.1),C=10)
View(svmtrein)
predict(svmtrein, x[-trainIndex,], type = "response", coupler = "minpair")
seqx1x2 <- seq(-2, 2, 0.1)
lseq <- length(seqx1x2)
MZ <- matrix(0, nrow = lseq, ncol = lseq)
cr <- 0
for (i in 1:lseq) {
for(j in 1:lseq) {
cr <- cr + 1
x1 <- seqx1x2[i]
x2 <- seqx1x2[j]
x1x2 <- matrix((cbind(x1, x2)), nrow = 1)
MZ[i, j] <- predict(svmtrein, x1x2, type = "response", coupler = "minpair")
}
}
View(MZ)
par(new = TRUE)
contour(seqx1x2, seqx1x2, MZ, nlevels = 1, xlim = c(-2, 2), ylim = c(-2, 2))
plot(x[,1],x[,2], col = cores[y], xlim = c(-1.0,1.0), ylim = c(-1.0,1.0), xlab='x', ylab='y')
cores <- rainbow(2)
plot(x[,1],x[,2], col = cores[y], xlim = c(-1.0,1.0), ylim = c(-1.0,1.0), xlab='x', ylab='y')
par(new = TRUE)
contour(seqx1x2, seqx1x2, MZ, nlevels = 1, xlim = c(-2, 2), ylim = c(-2, 2))
plot(x[,1],x[,2], col = cores[y], xlim = c(-2,2), ylim = c(-2,2), xlab='x', ylab='y')
par(new = TRUE)
contour(seqx1x2, seqx1x2, MZ, nlevels = 1, xlim = c(-2, 2), ylim = c(-2, 2))
persp3D(seqx1x2,seqx1x2,MZ,counter=T,theta = 55, phi = 30, r = 40,d = 0.1, expand = 0.5, ltheta = 90, lphi = 180, shade = 0.4,ticktype = 'detailed', nticks=5)
library('plot3D')
persp3D(seqx1x2,seqx1x2,MZ,counter=T,theta = 55, phi = 30, r = 40,d = 0.1, expand = 0.5, ltheta = 90, lphi = 180, shade = 0.4,ticktype = 'detailed', nticks=5)
View(svmtrein)
View(svmtrein)
cores <- rainbow(3)
suport <- svmtrein$SVindex
suport <- SVindex(svmtrein)
library('mlbench')
library('kernlab')
library(caret)
library(ks)
source('kMeans.R')
library('plot3D')
library('rgl')
library(MASS)
cores <- rainbow(3)
p<-mlbench.spirals(1000,cycles=1, sd=0.05)
x <- p$x
y <- as.numeric(p$classes)
trainIndex <- createDataPartition(y, p=0.8, list=FALSE)
plot(x[,1],x[,2], col = cores[y], xlim = c(-2,2), ylim = c(-2,2), xlab='x', ylab='y')
svmtrein<- ksvm(x[trainIndex,],y[trainIndex],type='C-bsvc',kernel='rbfdot',kpar=list(sigma=0.1),C=10)
suport <- SVindex(svmtrein)
predict(svmtrein, x[-trainIndex,], type = "response", coupler = "minpair")
seqx1x2 <- seq(-2, 2, 0.1)
lseq <- length(seqx1x2)
MZ <- matrix(0, nrow = lseq, ncol = lseq)
cr <- 0
for (i in 1:lseq) {
for(j in 1:lseq) {
cr <- cr + 1
x1 <- seqx1x2[i]
x2 <- seqx1x2[j]
x1x2 <- matrix((cbind(x1, x2)), nrow = 1)
MZ[i, j] <- predict(svmtrein, x1x2, type = "response", coupler = "minpair")
}
}
par(new = TRUE)
plot(x[suport,1],x[suport,2], col = cores[3], xlim = c(-2,2), ylim = c(-2,2), xlab='x', ylab='y')
par(new = TRUE)
contour(seqx1x2, seqx1x2, MZ, nlevels = 1, xlim = c(-2, 2), ylim = c(-2, 2))
