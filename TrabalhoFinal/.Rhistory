rm(list = ls())
library(mlbench)
library(e1071)
library(SparseM)
require(caret)
require(ks)
table = read.csv('EURUSD_D1.csv')
head(table)
table = read.csv('EURUSD_D1.csv')
head(table)
View(table)
table$Close
trainIndex <- createDataPartition(table$Close, p=0.7, list=FALSE)
length(table$Close)
trainIndex <- createDataPartition(table$Close[100:], p=0.7, list=FALSE)
table = read.csv('EURUSD_D1.csv');
dados = table$Close;
trainIndex <- createDataPartition(c(1:length(dados)-1), p=0.7, list=FALSE)
trainIndex <- createDataPartition(c(1:length(dados)-101), p=0.7, list=FALSE)
trainIndex <- createDataPartition(c(1:length(dados)-101), p=0.7, list=FALSE)
trainIndex <- createDataPartition(c(1:(length(dados)-101)), p=0.7, list=FALSE)
dados[1:2]
dadosEmMatriz = matrix(0, nrow = length(trainIndex), ncol = 100)
View(dadosEmMatriz)
for (i in 1:length(trainIndex)) {
dadosEmMatriz[i,] = dados[i + 100,]
}
dadosEmMatriz[i,] = dados[(i + 100),]
for (i in 1:length(trainIndex)) {
dadosEmMatriz[i,] = dados[i:(i + 100)]
}
dados[i:(i + 100)]
dadosEmMatriz = matrix(0, nrow = length(trainIndex), ncol = 101)
for (i in 1:length(trainIndex)) {
dadosEmMatriz[i,] = dados[i:(i + 100)]
}
View(dadosEmMatriz)
for (i in 1:length(trainIndex)) {
dadosEmMatriz[i,] = dados[i:(i + 100)]
if(dados[i+100] > dados[i+99]) {
dadosEmMatriz[i, 101] = 1
} else {
dadosEmMatriz[i, 101] = -1
}
}
View(dadosEmMatriz)
dadosEmMatriz[, 101]
dataFrame = data.frame(dadosEmMatriz[,1:100], y = as.factor(dadosEmMatriz[,101]))
View(dataFrame)
dataFrame = data.frame(dadosEmMatriz[,1:100], y = as.factor(dadosEmMatriz[,101]))
SVMModel = svm(y ~ ., data = dataFrame, kernel = "linear", cost = 10, scale = FALSE)
View(SVMModel)
dadosEmMatriz = matrix(0, nrow = length(dados), ncol = 101)
for (i in 1:(length(dados)) - 100) {
dadosEmMatriz[i,] = dados[i:(i + 100)]
if(dados[i+100] > dados[i+99]) {
dadosEmMatriz[i, 101] = 1
} else {
dadosEmMatriz[i, 101] = -1
}
}
dadosEmMatriz = matrix(0, nrow = length(dados), ncol = 101)
for (i in 1:(length(dados) - 101)) {
dadosEmMatriz[i,] = dados[i:(i + 100)]
if(dados[i+100] > dados[i+99]) {
dadosEmMatriz[i, 101] = 1
} else {
dadosEmMatriz[i, 101] = -1
}
}
View(dataFrame)
dados
View(dadosEmMatriz)
dadosEmMatriz = matrix(0, nrow = (length(dados) - 101), ncol = 101)
for (i in 1:(length(dados) - 101)) {
dadosEmMatriz[i,] = dados[i:(i + 100)]
if(dados[i+100] > dados[i+99]) {
dadosEmMatriz[i, 101] = 1
} else {
dadosEmMatriz[i, 101] = -1
}
}
View(dadosEmMatriz)
dadosTeste = dadosEmMatriz[trainIndex,]
dadosTreinamento = dadosEmMatriz[-trainIndex,]
trainIndex <- createDataPartition(c(1:(length(dados)-101)), p=0.7, list=FALSE)
dadosTreinamento = dadosEmMatriz[trainIndex,]
dadosTeste = dadosEmMatriz[-trainIndex,]
dataFrame = data.frame(dadosTreinamento[,1:100], y = as.factor(dadosTreinamento[,101]))
SVMModel = svm(y ~ ., data = dataFrame, kernel = "linear", cost = 10, scale = FALSE)
View(SVMModel)
predictions = predict(SVMModel,dadosTeste[,1:100])
confusionMatrix(factor(predictions), factor(dadosTeste[,101]))
SVMModel = svm(y ~ ., data = dataFrame, kernel = "linear", cost = 100, scale = FALSE)
predictions = predict(SVMModel,dadosTeste[,1:100])
confusionMatrix(factor(predictions), factor(dadosTeste[,101]))
SVMModel = svm(y ~ ., data = dataFrame, kernel = "linear", cost = 1000, scale = FALSE)
predictions = predict(SVMModel,dadosTeste[,1:100])
confusionMatrix(factor(predictions), factor(dadosTeste[,101]))
SVMModel = svm(y ~ ., data = dataFrame, kernel = "radial", cost = 10, scale = FALSE)
predictions = predict(SVMModel,dadosTeste[,1:100])
confusionMatrix(factor(predictions), factor(dadosTeste[,101]))
SVMModel = svm(y ~ ., data = dataFrame, kernel = "radial", cost = 1000, scale = FALSE)
predictions = predict(SVMModel,dadosTeste[,1:100])
confusionMatrix(factor(predictions), factor(dadosTeste[,101]))
SVMModel = svm(y ~ ., data = dataFrame, kernel = "radial", cost = 100000, scale = FALSE)
predictions = predict(SVMModel,dadosTeste[,1:100])
confusionMatrix(factor(predictions), factor(dadosTeste[,101]))
SVMModel = svm(y ~ ., data = dataFrame, kernel = "radial", cost = 10000, scale = FALSE)
predictions = predict(SVMModel,dadosTeste[,1:100])
confusionMatrix(factor(predictions), factor(dadosTeste[,101]))
rm(list = ls())
library(mlbench)
library(e1071)
library(SparseM)
require(caret)
require(ks)
table = read.csv('EURUSD_D1.csv')
dadosOpen = table$Open
dados = table$Close
media = mean(dadosOpen, dados)
all = cbind(dadosOpen, dados)
media = mean(all, 'r')
rowMeans(all)
media = rowMeans(all)
dadosOpen = table$Open
dadosClose = table$Close
allData = cbind(dadosOpen, dadosClose)
mediaData = rowMeans(allData)
dadosEmMatriz = matrix(0, nrow = (length(mediaData) - 101), ncol = 101)
for (i in 1:(length(mediaData) - 101)) {
dadosEmMatriz[i,] = mediaData[i:(i + 100)]
if(mediaData[i+100] > mediaData[i+99]) {
dadosEmMatriz[i, 101] = 1
} else {
dadosEmMatriz[i, 101] = -1
}
}
trainIndex <- createDataPartition(c(1:(length(mediaData)-101)), p=0.7, list=FALSE)
dadosTreinamento = dadosEmMatriz[trainIndex,]
dadosTeste = dadosEmMatriz[-trainIndex,]
dataFrame = data.frame(dadosTreinamento[,1:100], y = as.factor(dadosTreinamento[,101]))
SVMModel = svm(y ~ ., data = dataFrame, kernel = "radial", cost = 10000, scale = FALSE)
predictions = predict(SVMModel,dadosTeste[,1:100])
confusionMatrix(factor(predictions), factor(dadosTeste[,101]))
